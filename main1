import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "7992922377:AAFiVXfKdaP4aP0v6z2KtdTO1SnBhzJ9iLQ"
MANAGER_CHAT_ID = -1003074248726

class CarInfo(StatesGroup):
    task = State()          
    brand_model = State()
    year = State()
    imported = State()
    country = State()
    user_name = State()
    phone = State()

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML"),
    session=AiohttpSession()
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç—é–Ω–∏–Ω–≥ –≤—ã—Ö–ª–æ–ø–∞, —Ä–µ–º–æ–Ω—Ç –≥–ª—É—à–∏—Ç–µ–ª—è, —à—É–º –∏ —Ç.–ø.)")
    await state.set_state(CarInfo.task)


@dp.message(CarInfo.task)
async def handle_task(message: types.Message, state: FSMContext):
    await state.update_data(task=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –∫–∞–∫–æ–π —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ (–±–µ–Ω–∑–∏–Ω/–¥–∏–∑–µ–ª—å):")
    await state.set_state(CarInfo.brand_model)


@dp.message(CarInfo.brand_model)
async def handle_brand_model(message: types.Message, state: FSMContext):
    await state.update_data(brand_model=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.set_state(CarInfo.year)


@dp.message(CarInfo.year)
async def handle_year(message: types.Message, state: FSMContext):
    year = message.text.strip()
    if not year.isdigit() or not 1900 <= int(year) <= 2100:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    year_int = int(year)
    await state.update_data(year=year_int)

    if year_int >= 2017:
        kb_inline = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="import_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="import_no")]
        ])
        await message.answer("–ü—Ä–∏–≤–µ–∑–µ–Ω–∞ –ª–∏ –º–∞—à–∏–Ω–∞ –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã?", reply_markup=kb_inline)
        await state.set_state(CarInfo.imported)
    else:
        await state.update_data(imported="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ", country="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ")
        await message.answer("–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(CarInfo.user_name)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ ---
@dp.callback_query(lambda c: c.data in ["import_yes", "import_no"])
async def handle_imported_callback(callback: types.CallbackQuery, state: FSMContext):
    answer = "–î–∞" if callback.data == "import_yes" else "–ù–µ—Ç"
    await state.update_data(imported=answer)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer()

    if answer == "–î–∞":
        await callback.message.answer("–ò–∑ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –±—ã–ª–∞ –ø—Ä–∏–≤–µ–∑–µ–Ω–∞ –º–∞—à–∏–Ω–∞?")
        await state.set_state(CarInfo.country)
    else:
        await state.update_data(country="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ")
        await callback.message.answer("–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(CarInfo.user_name)


@dp.message(CarInfo.country)
async def handle_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text.strip())
    await message.answer("–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CarInfo.user_name)


@dp.message(CarInfo.user_name)
async def handle_user_name(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text.strip())
    btn = KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    kb = ReplyKeyboardMarkup(keyboard=[[btn]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb)
    await state.set_state(CarInfo.phone)


@dp.message(CarInfo.phone)
async def handle_phone(message: types.Message, state: FSMContext):
    if message.contact and message.contact.phone_number:
        phone = message.contact.phone_number
    else:
        phone = message.text.strip()
        if not phone.isdigit() or not 11 <= len(phone) <= 12:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.")
            return

    if phone.startswith("8"):
        phone = "+7" + phone[1:]
    elif not phone.startswith("+"):
        phone = "+" + phone

    await state.update_data(phone=phone)

    data = await state.get_data()
    tg_user = message.from_user.full_name
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç username"

    text = (
        "üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫\n\n"
        f"üìå <i>–¶–µ–ª—å –æ–±—Ä–∞—â–µ–Ω–∏—è:</i> <b>{data['task']}</b>\n"
        f"üöó <i>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å:</i> <b>{data['brand_model']}</b>\n"
        f"üåç <i>–ü—Ä–∏–≤–µ–∑–µ–Ω–∞ –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã:</i> <b>{data['imported']}</b>\n"
        f"üè≥Ô∏è <i>–û—Ç–∫—É–¥–∞ –ø—Ä–∏–≤–µ–∑–ª–∏ –∞–≤—Ç–æ:</i> <b>{data.get('country', '–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ')}</b>\n"
        f"üìÖ <i>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</i> <b>{data['year']}</b>\n\n"
        f"üìù <i>–ò–º—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è:</i> <b>{data['user_name']}</b>\n"
        f"üîó <i>Telegram:</i> <b>{username}</b>\n"
        f"üì± <i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> <b>{phone}</b>"
    )
    await bot.send_message(MANAGER_CHAT_ID, text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=ReplyKeyboardRemove())
    await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
